// <auto-generated/>
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Chefs.Services.Clients.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.16.0")]
    #pragma warning disable CS1591
    public partial class RecipeData : IParsable
    #pragma warning restore CS1591
    {
        /// <summary>The calories property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Calories { get; set; }
#nullable restore
#else
        public string Calories { get; set; }
#endif
        /// <summary>The category property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Chefs.Services.Clients.Models.CategoryData? Category { get; set; }
#nullable restore
#else
        public global::Chefs.Services.Clients.Models.CategoryData Category { get; set; }
#endif
        /// <summary>The cookTime property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Chefs.Services.Clients.Models.TimeSpanObject? CookTime { get; set; }
#nullable restore
#else
        public global::Chefs.Services.Clients.Models.TimeSpanObject CookTime { get; set; }
#endif
        /// <summary>The date property</summary>
        public DateTimeOffset? Date { get; set; }
        /// <summary>The details property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Details { get; set; }
#nullable restore
#else
        public string Details { get; set; }
#endif
        /// <summary>The difficulty property</summary>
        public int? Difficulty { get; set; }
        /// <summary>The id property</summary>
        public Guid? Id { get; set; }
        /// <summary>The imageUrl property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ImageUrl { get; set; }
#nullable restore
#else
        public string ImageUrl { get; set; }
#endif
        /// <summary>The ingredients property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::Chefs.Services.Clients.Models.IngredientData>? Ingredients { get; set; }
#nullable restore
#else
        public List<global::Chefs.Services.Clients.Models.IngredientData> Ingredients { get; set; }
#endif
        /// <summary>The isFavorite property</summary>
        public bool? IsFavorite { get; set; }
        /// <summary>The name property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Name { get; set; }
#nullable restore
#else
        public string Name { get; set; }
#endif
        /// <summary>The nutrition property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Chefs.Services.Clients.Models.NutritionData? Nutrition { get; set; }
#nullable restore
#else
        public global::Chefs.Services.Clients.Models.NutritionData Nutrition { get; set; }
#endif
        /// <summary>The reviews property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::Chefs.Services.Clients.Models.ReviewData>? Reviews { get; set; }
#nullable restore
#else
        public List<global::Chefs.Services.Clients.Models.ReviewData> Reviews { get; set; }
#endif
        /// <summary>The serves property</summary>
        public int? Serves { get; set; }
        /// <summary>The steps property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::Chefs.Services.Clients.Models.StepData>? Steps { get; set; }
#nullable restore
#else
        public List<global::Chefs.Services.Clients.Models.StepData> Steps { get; set; }
#endif
        /// <summary>The userId property</summary>
        public Guid? UserId { get; set; }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Chefs.Services.Clients.Models.RecipeData"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Chefs.Services.Clients.Models.RecipeData CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::Chefs.Services.Clients.Models.RecipeData();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "calories", n => { Calories = n.GetStringValue(); } },
                { "category", n => { Category = n.GetObjectValue<global::Chefs.Services.Clients.Models.CategoryData>(global::Chefs.Services.Clients.Models.CategoryData.CreateFromDiscriminatorValue); } },
                { "cookTime", n => { CookTime = n.GetObjectValue<global::Chefs.Services.Clients.Models.TimeSpanObject>(global::Chefs.Services.Clients.Models.TimeSpanObject.CreateFromDiscriminatorValue); } },
                { "date", n => { Date = n.GetDateTimeOffsetValue(); } },
                { "details", n => { Details = n.GetStringValue(); } },
                { "difficulty", n => { Difficulty = n.GetIntValue(); } },
                { "id", n => { Id = n.GetGuidValue(); } },
                { "imageUrl", n => { ImageUrl = n.GetStringValue(); } },
                { "ingredients", n => { Ingredients = n.GetCollectionOfObjectValues<global::Chefs.Services.Clients.Models.IngredientData>(global::Chefs.Services.Clients.Models.IngredientData.CreateFromDiscriminatorValue)?.AsList(); } },
                { "isFavorite", n => { IsFavorite = n.GetBoolValue(); } },
                { "name", n => { Name = n.GetStringValue(); } },
                { "nutrition", n => { Nutrition = n.GetObjectValue<global::Chefs.Services.Clients.Models.NutritionData>(global::Chefs.Services.Clients.Models.NutritionData.CreateFromDiscriminatorValue); } },
                { "reviews", n => { Reviews = n.GetCollectionOfObjectValues<global::Chefs.Services.Clients.Models.ReviewData>(global::Chefs.Services.Clients.Models.ReviewData.CreateFromDiscriminatorValue)?.AsList(); } },
                { "serves", n => { Serves = n.GetIntValue(); } },
                { "steps", n => { Steps = n.GetCollectionOfObjectValues<global::Chefs.Services.Clients.Models.StepData>(global::Chefs.Services.Clients.Models.StepData.CreateFromDiscriminatorValue)?.AsList(); } },
                { "userId", n => { UserId = n.GetGuidValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteStringValue("calories", Calories);
            writer.WriteObjectValue<global::Chefs.Services.Clients.Models.CategoryData>("category", Category);
            writer.WriteObjectValue<global::Chefs.Services.Clients.Models.TimeSpanObject>("cookTime", CookTime);
            writer.WriteDateTimeOffsetValue("date", Date);
            writer.WriteStringValue("details", Details);
            writer.WriteIntValue("difficulty", Difficulty);
            writer.WriteGuidValue("id", Id);
            writer.WriteStringValue("imageUrl", ImageUrl);
            writer.WriteCollectionOfObjectValues<global::Chefs.Services.Clients.Models.IngredientData>("ingredients", Ingredients);
            writer.WriteBoolValue("isFavorite", IsFavorite);
            writer.WriteStringValue("name", Name);
            writer.WriteObjectValue<global::Chefs.Services.Clients.Models.NutritionData>("nutrition", Nutrition);
            writer.WriteCollectionOfObjectValues<global::Chefs.Services.Clients.Models.ReviewData>("reviews", Reviews);
            writer.WriteIntValue("serves", Serves);
            writer.WriteCollectionOfObjectValues<global::Chefs.Services.Clients.Models.StepData>("steps", Steps);
            writer.WriteGuidValue("userId", UserId);
        }
    }
}
