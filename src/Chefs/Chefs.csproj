<Project Sdk="Uno.Sdk.Private">
	<PropertyGroup>
			<!-- Building with dotnet build -f net9.0-platform will still cause restore to happen for all TargetFrameworks -->
		<!-- which will force us to install all workloads even if not needed -->
		<!-- To prevent that, we will pass TargetFrameworkOverride as a global property (i.e, dotnet build -p:TargetFrameworkOverride=net9.0-platform) -->
		<!-- That way, we set TargetFrameworks property to only the needed TargetFramework -->
		<TargetFramework Condition="'$(TargetFrameworkOverride)'!=''">$(TargetFrameworkOverride)</TargetFramework>
		<TargetFrameworks Condition="'$(TargetFrameworkOverride)'==''">
			net9.0-android;
			net9.0-ios;
			net9.0-maccatalyst;
			net9.0-windows10.0.19041;
			net9.0-desktop;
			net9.0-browserwasm;
		</TargetFrameworks>
		<OutputType>Exe</OutputType>
		<UnoSingleProject>true</UnoSingleProject>

		<!-- Display name -->
		<ApplicationTitle>Chefs</ApplicationTitle>
		<!-- App Identifier -->

		<ApplicationId Condition="'$(UseSkiaRendering)' != 'true'">uno.platform.chefs</ApplicationId>
		<ApplicationId Condition="'$(UseSkiaRendering)' == 'true'">uno.platform.chefs.skia</ApplicationId>

		<ApplicationId Condition="'$(IsCanaryBranch)'=='true'">$(ApplicationId)-canary</ApplicationId>

		<ApplicationDisplayVersion>1.0</ApplicationDisplayVersion>
		<ApplicationVersion>1</ApplicationVersion>
		<UseMocks>True</UseMocks>
		<!--
			If you encounter this error message:

			error NETSDK1148: A referenced assembly was compiled using a newer version of Microsoft.Windows.SDK.NET.dll.
			Please update to a newer .NET SDK in order to reference this assembly.

			This means that the two packages below must be aligned with the "build" version number of
			the "Microsoft.Windows.SDK.BuildTools" package above, and the "revision" version number
			must be the highest found in https://www.nuget.org/packages/Microsoft.Windows.SDK.NET.Ref.
		-->
		<!-- <WindowsSdkPackageVersion>10.0.22621.28</WindowsSdkPackageVersion> -->
		<!--
			UnoFeatures let's you quickly add and manage implicit package references based on the features you want to use.
			https://aka.platform.uno/singleproject-features
		-->

		<!-- Uncomment to use skia rendering
		<UseSkiaRendering>true</UseSkiaRendering>
		-->
		
		<IsSkiaWasm Condition="'$(UseSkiaRendering)'=='true' AND '$(TargetFramework)'=='net9.0-browserwasm'">true</IsSkiaWasm>
		<IsSkiaWasm Condition="'$(IsSkiaWasm)'==''">false</IsSkiaWasm>
		<IsSkiaAndroid Condition="'$(UseSkiaRendering)'=='true' AND '$(TargetFramework)'=='net9.0-android'">true</IsSkiaAndroid>
		<IsSkiaAndroid Condition="'$(IsSkiaAndroid)'==''">false</IsSkiaAndroid>
		<IsSkiaUIKit Condition="'$(UseSkiaRendering)'=='true' AND ('$(TargetFramework)'=='net9.0-ios' OR '$(TargetFramework)'=='net9.0-maccatalyst')">true</IsSkiaUIKit>
		<IsSkiaUIKit Condition="'$(IsSkiaUIKit)'==''">false</IsSkiaUIKit>

		<UnoFeatures>
			Material;
			Hosting;
			Toolkit;
			Logging;
			MVUX;
			Configuration;
			Http;
			Serialization;
			Localization;
			Navigation;
			MediaElement;
			Skia;
			ThemeService;
			Authentication;
		</UnoFeatures>
		<UnoFeatures Condition="$(IsSkiaWasm)">$(UnoFeatures)SkiaRenderer;</UnoFeatures>
		<UnoFeatures Condition="$(IsSkiaAndroid)">$(UnoFeatures)SkiaRenderer;</UnoFeatures>
		<UnoFeatures Condition="$(IsSkiaUIKit)">$(UnoFeatures)SkiaRenderer;</UnoFeatures>
		<!-- <UnoFeatures Condition="!$(IsSkiaWasm) AND !$(IsSkiaAndroid)">$(UnoFeatures)MediaElement;</UnoFeatures> -->

		<AllowUnsafeBlocks>true</AllowUnsafeBlocks>
		<DefineConstants Condition="$(IsSkiaWasm)">$(DefineConstants);IS_WASM_SKIA</DefineConstants>
		<DefineConstants Condition="$(IsSkiaAndroid)">$(DefineConstants);IS_ANDROID_SKIA</DefineConstants>
		<DefineConstants Condition="$(IsSkiaUIKit)">$(DefineConstants);IS_UIKIT_SKIA</DefineConstants>
	</PropertyGroup>

	<Choose>
		<When Condition="$(IsWinAppSdk)">
			<ItemGroup>
				<PackageReference Include="Mapsui.WinUI" />
				<PackageReference Include="LiveChartsCore.SkiaSharpView.WinUI" />
			</ItemGroup>
		</When>
		<Otherwise>
			<ItemGroup>
				<PackageReference Include="Mapsui.Uno.WinUI" />
				<PackageReference Include="LiveChartsCore.SkiaSharpView.Uno.WinUI" />
			</ItemGroup>
		</Otherwise>
	</Choose>

	<PropertyGroup Condition="'$(UseMocks)'=='True'">
		<DefineConstants>$(DefineConstants);USE_MOCKS</DefineConstants>
	</PropertyGroup>

	<ItemGroup>
		<PackageReference Include="Uno.Extensions.Http.Kiota" />
	</ItemGroup>

	<ItemGroup>
		<EmbeddedResource Include="Data\**\*.json" />
	</ItemGroup>

	<ItemGroup>
	  <EmbeddedResource Include="Assets\Maps\location_pin.svg" />
	  <EmbeddedResource Include="Assets\Maps\location_circle.svg" />
	</ItemGroup>

	<PropertyGroup Condition="'$(Configuration)'=='Debug' or '$(IsUiAutomationMappingEnabled)'=='True'">
		<IsUiAutomationMappingEnabled>True</IsUiAutomationMappingEnabled>
		<DefineConstants>$(DefineConstants);USE_UITESTS</DefineConstants>
	</PropertyGroup>

	<PropertyGroup>
		<UnoSplashScreenColor>#313033</UnoSplashScreenColor>
		<UnoIconForegroundScale>0.5</UnoIconForegroundScale>
		<UnoSplashScreenBaseSize>350,300</UnoSplashScreenBaseSize>
		<UnoIconForegroundFile Condition="'$(IsCanaryBranch)'=='true'">Assets/Icons/icon_foreground_canary.svg</UnoIconForegroundFile>
		<UnoSplashScreenFile Condition="'$(IsCanaryBranch)'=='true'">Assets/Splash/splash_screen_canary.svg</UnoSplashScreenFile>
	</PropertyGroup>

	<Choose>
		<When Condition="'$(IsCanaryBranch)'=='true'">
			<ItemGroup>
				<UnoImage Include="Assets\Icons\chefslogo_canary.svg" Link="Assets\Icons\chefslogosignature.svg" />
				<UnoImage Include="Assets\Icons\chefslogo_dark_canary.svg" Link="Assets\Icons\chefslogosignature_dark.svg" />
			</ItemGroup>
		</When>
		<Otherwise>
			<ItemGroup>
				<UnoImage Include="Assets\Icons\chefslogo.svg" Link="Assets\Icons\chefslogosignature.svg" />
				<UnoImage Include="Assets\Icons\chefslogo_dark.svg" Link="Assets\Icons\chefslogosignature_dark.svg" />
			</ItemGroup>
		</Otherwise>
	</Choose>

	<Choose>
		<When Condition="$(IsAndroid) or $(IsIOSOrCatalyst)">
			<ItemGroup>
				<IncludeXamlNamespaces Include="mobile" />
				<ExcludeXamlNamespaces Include="not_mobile" />
			</ItemGroup>
		</When>
		<Otherwise>
			<ItemGroup>
				<IncludeXamlNamespaces Include="not_mobile" />
				<ExcludeXamlNamespaces Include="mobile" />
			</ItemGroup>
		</Otherwise>
	</Choose>

	<Choose>
		<When Condition="$(IsIOS)">
			<PropertyGroup Condition="'$(Configuration)'=='Release'">
				<CodesignKey>iPhone Distribution</CodesignKey>
			</PropertyGroup>
		</When>
		<When Condition="$(IsMacCatalyst)">
			<PropertyGroup Condition="'$(Configuration)'=='Release'">
				<MtouchUseLlvm>true</MtouchUseLlvm>
				<CodeSigningKey>Apple Distribution: Uno Platform Inc. (PD74CHS9Z5)</CodeSigningKey>
				<PackageSigningKey>3rd Party Mac Developer Installer</PackageSigningKey>
				<CreatePackage>true</CreatePackage>
				<EnablePackageSigning>true</EnablePackageSigning>
				<EnableCodeSigning>true</EnableCodeSigning>

				<_BaseCodesignProvision>Uno Chefs</_BaseCodesignProvision>
				<_BaseCodesignProvision Condition="$(UseSkiaRendering)">Uno Chefs Skia</_BaseCodesignProvision>
				<CodesignProvision>$(_BaseCodesignProvision) (Catalyst)</CodesignProvision>
				<CodesignProvision Condition="$(BUILD_SOURCEBRANCH.StartsWith('refs/heads/canaries'))">$(_BaseCodesignProvision) Canary (Catalyst)</CodesignProvision>
			</PropertyGroup>
		</When>
		<When Condition=" '$(TargetFramework)' == 'net9.0-browserwasm' ">
			<ItemGroup>
				<PackageReference Include="Uno.Wasm.Bootstrap" />
			</ItemGroup>
		</When>
	</Choose>

	<!-- https://github.com/dotnet/runtime/issues/109289 -->
	<Target Name="Issue109289_Workaround" AfterTargets="_BrowserWasmWriteRspForLinking" Condition=" $(NETCoreSdkVersion.Contains('9.0.')) ">
		<ItemGroup>
			<_WasmLinkStepArgs Remove="@(_EmccLinkStepArgs)" />
			<_EmccLinkStepArgs Remove="&quot;%(_WasmNativeFileForLinking.Identity)&quot;" />
			<_WasmLinkDependencies Remove="@(_WasmNativeFileForLinking)" />

			<_SkiaSharpToReorder Include="@(_WasmNativeFileForLinking)" Condition="$([System.String]::Copy('%(FullPath)').Contains('SkiaSharp'))" />
			<_WasmNativeFileForLinking Remove="@(_SkiaSharpToReorder)" />
			<_WasmNativeFileForLinking Include="@(_SkiaSharpToReorder)" />

			<_EmccLinkStepArgs Include="&quot;%(_WasmNativeFileForLinking.Identity)&quot;" />
			<_WasmLinkDependencies Include="@(_WasmNativeFileForLinking)" />
			<_WasmLinkStepArgs Include="@(_EmccLinkStepArgs)" />
		</ItemGroup>
	</Target>

	<Target Name="AdjustStrip" BeforeTargets="_WasmCommonPrepareForWasmBuildNative">
		<PropertyGroup>
			<!-- Enable debug symbols for release mode to profiling -->
			<WasmNativeStrip>false</WasmNativeStrip>
			<WasmNativeDebugSymbols>true</WasmNativeDebugSymbols>
		</PropertyGroup>
	</Target>
</Project>
